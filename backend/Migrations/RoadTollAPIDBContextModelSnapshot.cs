// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoadTollAPI.Context;

namespace RoadTollAPI.Migrations
{
    [DbContext(typeof(RoadTollAPIDBContext))]
    partial class RoadTollAPIDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RoadTollAPI.Entities.Car", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CarOfOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("regnr")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("CarOfOwnerId")
                        .IsUnique();

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("RoadTollAPI.Entities.Day", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("day")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("RoadTollAPI.Entities.DayCar", b =>
                {
                    b.Property<int>("dayId")
                        .HasColumnType("int");

                    b.Property<int>("carId")
                        .HasColumnType("int");

                    b.HasKey("dayId", "carId");

                    b.HasIndex("carId");

                    b.ToTable("DayCars");
                });

            modelBuilder.Entity("RoadTollAPI.Entities.Owner", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("RoadTollAPI.Entities.Car", b =>
                {
                    b.HasOne("RoadTollAPI.Entities.Owner", "owner")
                        .WithOne("car")
                        .HasForeignKey("RoadTollAPI.Entities.Car", "CarOfOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoadTollAPI.Entities.DayCar", b =>
                {
                    b.HasOne("RoadTollAPI.Entities.Car", "car")
                        .WithMany("daycars")
                        .HasForeignKey("carId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoadTollAPI.Entities.Day", "day")
                        .WithMany("daycars")
                        .HasForeignKey("dayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
